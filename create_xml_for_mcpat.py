#!/usr/bin/env python
# ===========================================================================
# Copyright 2017 `Tung Thanh Le` 
# Email: ttungl at gmail dot com
#
# Heterogeneous Architecture Configurations Generator for Multi2Sim simulator
# (aka, `HeteroArchGen4M2S`)
# `HeteroArchGen4M2S` is free software, which is freely to be
# redistributed and modified it under the terms of 
# the GNU General Public License as published by
# the Free Software Foundation. 
# For more details `http://www.gnu.org/licenses`
# `HeteroArchGen4M2S` is written to help you configure M2S 
# easily, but non-warranty and non-mechantability.
# ============================================================================


def create_xml_for_mcpat(numcores, numL1Caches, numL2Caches, num_mem_controllers, benchmark):
	## Create a sample file "McPAT_hsa_%0.f_benchmark_%s.xml".
	## Several paramters that need to be updated
	
	## By default, each x86 CPU consists of two(2) cores with L1$ (either 
	# a shared L1-I$ or separate L1-I$) and shared L2$ for two cores in the CPU.
	# Each GPU contains four(4) compute units
	# File name
	f = open('pipeline_xml_for_mcpat/McPAT_hsa_%0.f_benchmark_%s.xml' % (numcores, benchmark), 'w');
	## Common parameters for both.
	f.write("<?xml version=\"1.0\" ?>\n")
	f.write("<component id=\"root\" name=\"root\">\n")
	f.write("	<component id=\"system\" name=\"system\">\n")
	f.write("	<!--McPAT will skip the components if number is set to 0 -->\n")
	f.write("	<param name=\"number_of_cores\" value=\"%0.f\"/>\n" % numcores)
	f.write("	<param name=\"number_of_L1Directories\" value=\"%0.f\"/>\n" % numL1Caches)
	f.write("	<param name=\"number_of_L2Directories\" value=\"0\"/>\n")
	f.write("	<param name=\"number_of_L2s\" value=\"%0.f\"/>\n" % numL2Caches) 
	f.write("	<!-- This number means how many L2 clusters in each cluster there can be multiple banks/ports -->\n")
	f.write("	<param name=\"Private_L2\" value=\"0\"/>\n")
	f.write("	<!--1 Private, 0 shared/coherent -->\n")
	f.write("	<param name=\"number_of_L3s\" value=\"0\"/>\n") 
	f.write("	<!-- This number means how many L3 clusters -->\n")
	f.write("	<param name=\"number_of_NoCs\" value=\"1\"/>\n")
	f.write("	<param name=\"homogeneous_cores\" value=\"0\"/>\n")
	f.write("	<!--1 means homo -->\n")
	f.write("	<param name=\"homogeneous_L2s\" value=\"1\"/>\n")
	f.write("	<param name=\"homogeneous_L1Directorys\" value=\"1\"/>\n")
	f.write("	<param name=\"homogeneous_L2Directorys\" value=\"1\"/>\n")
	f.write("	<param name=\"homogeneous_L3s\" value=\"1\"/>\n")
	f.write("	<param name=\"homogeneous_ccs\" value=\"1\"/>\n")
	f.write("	<!--cache coherece hardware -->\n")
	f.write("	<param name=\"homogeneous_NoCs\" value=\"1\"/>\n")
	f.write("	<param name=\"core_tech_node\" value=\"45\"/>\n")
	f.write("	<!-- nm -->\n")
	f.write("	<param name=\"target_core_clockrate\" value=\"3400\"/>\n")
	f.write("	<!--MHz -->\n")
	f.write("	<param name=\"temperature\" value=\"380\"/>\n") 
	f.write("	<!-- Kelvin -->\n")
	f.write("	<param name=\"number_cache_levels\" value=\"2\"/>\n")
	f.write("	<param name=\"interconnect_projection_type\" value=\"0\"/>\n")
	f.write("	<!--0: agressive wire technology; 1: conservative wire technology -->\n")
	f.write("	<param name=\"device_type\" value=\"0\"/>\n")
	f.write("	<!--0: HP(High Performance Type); 1: LSTP(Low standby power) 2: LOP (Low Operating Power)  -->\n")
	f.write("	<param name=\"power_gating\" value=\"1\"/>\n")
	f.write("	<!-- 0 not enabled; 1 enabled -->\n")
	f.write("	<param name=\"longer_channel_device\" value=\"1\"/>\n")
	f.write("	<!-- 0 no use; 1 use when approperiate -->\n")
	f.write("	<param name=\"machine_bits\" value=\"64\"/>\n")
	f.write("	<param name=\"virtual_address_width\" value=\"64\"/>\n")
	f.write("	<param name=\"physical_address_width\" value=\"52\"/>\n")
	f.write("	<param name=\"virtual_memory_page_size\" value=\"4096\"/>\n")
	f.write("	<!-- address width determins the tag_width in Cache, LSQ and buffers in cache controller default value is machine_bits, if not set --> \n")
	f.write("	<stat name=\"total_cycles\" value=\"100000\"/>\n")
	f.write("	<stat name=\"idle_cycles\" value=\"0\"/>\n")
	f.write("	<stat name=\"busy_cycles\"  value=\"100000\"/>\n")

	f.write("	<!--This page size(B) is complete different from the page size in Main memo secction. this page size is the size of virtual memory from OS/Archi perspective; the page size in Main memo secction is the actuall physical line in a DRAM bank  -->\n")
	

	# Cores #######################################################
	for i in range(0,numcores):
		f.write("	<!-- *********************** core ID %0.f ******************* -->\n" % i)
		f.write("	<component id=\"system.core%0.f\" name=\"core%0.f\">\n" % (i, i))
		f.write("		<!-- Core property -->\n")	
		f.write("		<param name=\"clock_rate\" value=\"3400\"/>\n")	
		f.write("		<param name=\"vdd\" value=\"0\"/>\n")
		f.write("		<!-- 0 means using ITRS default vdd -->\n")	
		f.write("		<!-- for cores with unknow timing, set to 0 to force off the opt flag -->\n")	
		f.write("		<param name=\"opt_local\" value=\"0\"\/>\n")	
		f.write("		<param name=\"instruction_length\" value=\"32\"/>\n")	
		f.write("		<param name=\"opcode_width\" value=\"16\"/>\n")	
		f.write("		<param name=\"x86\" value=\"1\"/>\n")
		f.write("		<param name=\"micro_opcode_width\" value=\"8\"/>\n")
		f.write("		<param name=\"machine_type\" value=\"0\"/>\n")	
		f.write("		<!-- inorder/OoO; 1 inorder; 0 OOO-->\n")
		f.write("		<param name=\"number_hardware_threads\" value=\"2\"/>\n")	
		f.write("		<!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor, it only may be more than one in SMT processors. BTB ports always equals to fetch ports since branch information in consective branch instructions in the same fetch group can be read out from BTB once.--> \n")	
		f.write("		<param name=\"fetch_width\" value=\"4\"/>\n")	
		f.write("		<!-- fetch_width determins the size of cachelines of L1 cache block -->\n")	
		f.write("		<param name=\"number_instruction_fetch_ports\" value=\"1\"/>\n")	
		f.write("		<param name=\"decode_width\" value=\"4\"/>\n")	
		f.write("		<!-- decode_width determins the number of ports of the renaming table (both RAM and CAM) scheme -->\n")	
		f.write("		<param name=\"issue_width\" value=\"4\"/>\n")
		f.write("		<param name=\"peak_issue_width\" value=\"6\"/>\n")	
		f.write("		<!-- issue_width determins the number of ports of Issue window and other logic as in the complexity effective proccessors paper; issue_width==dispatch_width -->\n")	
		f.write("		<param name=\"commit_width\" value=\"4\"/>\n")	
		f.write("		<!-- commit_width determins the number of ports of register files -->\n")	
		f.write("		<param name=\"fp_issue_width\" value=\"2\"/>\n")
		f.write("		<param name=\"prediction_width\" value=\"1\"/>\n")	 
		f.write("		<!-- number of branch instructions can be predicted simultannouesl-->\n")
		f.write("		<!-- Current version of McPAT does not distinguish int and floating point pipelines. Theses parameters are reserved for future use.--> \n")	
		f.write("		<param name=\"pipelines_per_core\" value=\"1,1\"/>\n")	
		f.write("		<!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->\n")
		f.write("		<param name=\"pipeline_depth\" value=\"31,31\"/>\n")	
		f.write("		<!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->\n")	
		f.write("		<!-- issue and exe unit-->\n")
		f.write("		<param name=\"ALU_per_core\" value=\"6\"/>\n")	
		f.write("		<!-- contains an adder, a shifter, and a logical unit -->\n")	
		f.write("		<param name=\"MUL_per_core\" value=\"1\"/>\n")	
		f.write("		<!-- For MUL and Div -->\n")	
		f.write("		<param name=\"FPU_per_core\" value=\"2\"/>\n")			
		f.write("		<!-- buffer between IF and ID stage -->\n")	
		f.write("		<param name=\"instruction_buffer_size\" value=\"64\"/>\n")	
		f.write("		<!-- buffer between ID and sche/exe stage -->\n")	
		f.write("		<param name=\"decoded_stream_buffer_size\" value=\"32\"/>\n") ## 32
		f.write("		<param name=\"instruction_window_scheme\" value=\"0\"/>\n")	
		f.write("		<!-- 0 PHYREG based, 1 RSBASED-->\n")
		f.write("		<!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->\n")
		f.write("		<param name=\"instruction_window_size\" value=\"40\"/>\n")	## 40
		f.write("		<param name=\"fp_instruction_window_size\" value=\"64\"/>\n")
		f.write("		<!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->\n")	
		f.write("		<param name=\"ROB_size\" value=\"64\"/>\n")	## 64
		f.write("		<!-- each in-flight instruction has an entry in ROB -->\n")	
		f.write("		<!-- registers -->\n")	
		f.write("		<param name=\"archi_Regs_IRF_size\" value=\"16\"/>\n")	## 16
		f.write("		<!-- X86-64 has 16GPR -->\n")				
		f.write("		<param name=\"archi_Regs_FRF_size\" value=\"32\"/>\n")	 ## 32
		f.write("		<!-- MMX + XMM -->\n")	
		f.write("		<!--  if OoO processor, phy_reg number is needed for renaming logic, renaming logic is for both integer and floating point insts.  -->\n")	
		f.write("		<param name=\"phy_Regs_IRF_size\" value=\"80\"/>\n")
		f.write("		<param name=\"phy_Regs_FRF_size\" value=\"40\"/>\n")
		f.write("		<!-- rename logic -->\n")	
		f.write("		<param name=\"rename_scheme\" value=\"0\"/>\n")	
		f.write("		<!-- can be RAM based(0) or CAM based(1) rename scheme  RAM-based scheme will have free list, status table; CAM-based scheme have the valid bit in the data field of the CAM both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions; Detailed RAT Implementation see TR -->\n")	
		f.write("		<param name=\"register_windows_size\" value=\"8\"/>\n")	## 8
		f.write("		<!-- how many windows in the windowed register file, sun processors; no register windowing is used when this number is 0 -->\n")	
		f.write("		<!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha), They will always try to exeute out-of-order though. -->\n")	
		f.write("		<param name=\"LSU_order\" value=\"inorder\"/>\n")
		f.write("		<param name=\"store_buffer_size\" value=\"64\"/>\n")	
		f.write("		<!-- By default, in-order cores do not have load buffers -->\n")	
		f.write("		<param name=\"load_buffer_size\" value=\"64\"/>\n")
		f.write("		<!-- number of ports refer to sustainable concurrent memory accesses -->\n")	 
		f.write("		<param name=\"memory_ports\" value=\"2\"/>\n")		
		f.write("		<!-- max_allowed_in_flight_memo_instructions determins the # of ports of load and store buffer as well as the ports of Dcache which is connected to LSU -->\n")		
		f.write("		<!-- dual-pumped Dcache can be used to save the extra read/write ports -->\n")	
		f.write("		<param name=\"RAS_size\" value=\"64\"/>\n")		## 32					
		f.write("		<!-- general stats, defines simulation periods;require total, idle, and busy cycles for senity check  -->\n")	
		f.write("		<!-- please note: if target architecture is X86, then all the instrucions refer to (fused) micro-ops -->\n")	
		f.write("		<stat 	name=\"total_instructions\" value=\"400000\"/>\n")	
		f.write("		<stat 	name=\"int_instructions\" value=\"200000\"/>\n")	
		f.write("		<stat 	name=\"fp_instructions\" value=\"100000\"/>\n")	
		f.write("		<stat 	name=\"branch_instructions\" value=\"100000\"/>\n")	
		f.write("		<stat 	name=\"branch_mispredictions\" value=\"0\"/>\n")	
		f.write("		<stat 	name=\"load_instructions\" value=\"0\"/>\n")	
		f.write("		<stat 	name=\"store_instructions\" value=\"50000\"/>\n")	
		f.write("		<stat 	name=\"committed_instructions\" value=\"400000\"/>\n")	
		f.write("		<stat 	name=\"committed_int_instructions\" value=\"200000\"/>\n")	
		f.write("		<stat 	name=\"committed_fp_instructions\" value=\"100000\"/>\n")	
		f.write("		<stat 	name=\"pipeline_duty_cycle\" value=\"0.5\"/>\n")	
		f.write("		<!-- <=1, runtime_ipc/peak_ipc; averaged for all cores if homogenous -->\n")	
		f.write("		<!-- the following cycle stats are used for heterogeneouse cores only,  please ignore them if homogeneouse cores -->\n")	
		f.write("		<stat 	name=\"total_cycles\" value=\"100000\"/>\n")	
		f.write("		<stat 	name=\"idle_cycles\" value=\"0\"/>\n")	
		f.write("		<stat 	name=\"busy_cycles\"  value=\"100000\"/>\n")	
		f.write("		<!-- instruction buffer stats -->\n")	
		f.write("		<!-- ROB stats, both RS and Phy based OoOs have ROB performance simulator should capture the difference on accesses, otherwise, McPAT has to guess based on number of commited instructions. -->\n")	
		f.write("		<stat 	name=\"ROB_reads\" value=\"400000\"/>\n")	
		f.write("		<stat 	name=\"ROB_writes\" value=\"400000\"/>\n")	
		f.write("		<!-- RAT accesses -->\n")	
		f.write("		<stat 	name=\"rename_reads\" value=\"800000\"/>\n")	 
		f.write("		<!--lookup in renaming logic -->\n")	
		f.write("		<stat 	name=\"rename_writes\" value=\"400000\"/>\n")
		f.write("		<!--update dest regs. renaming logic -->\n")	
		f.write("		<stat 	name=\"fp_rename_reads\" value=\"200000\"/>\n")	
		f.write("		<stat 	name=\"fp_rename_writes\" value=\"100000\"/>\n")	
		f.write("		<!-- decode and rename stage use this, should be total ic - nop -->\n")	
		f.write("		<!-- Inst window stats -->\n")	
		f.write("		<stat 	name=\"inst_window_reads\" value=\"400000\"/>\n")	
		f.write("		<stat 	name=\"inst_window_writes\" value=\"400000\"/>\n")	
		f.write("		<stat 	name=\"inst_window_wakeup_accesses\" value=\"800000\"/>\n")	
		f.write("		<stat 	name=\"fp_inst_window_reads\" value=\"200000\"/>\n")	
		f.write("		<stat 	name=\"fp_inst_window_writes\" value=\"200000\"/>\n")	
		f.write("		<stat 	name=\"fp_inst_window_wakeup_accesses\" value=\"400000\"/>\n")	
		f.write("		<!--  RF accesses -->\n")	
		f.write("		<stat 	name=\"int_regfile_reads\" value=\"600000\"/>\n")
		f.write("		<stat 	name=\"float_regfile_reads\" value=\"100000\"/>\n")	
		f.write("		<stat 	name=\"int_regfile_writes\" value=\"300000\"/>\n")	
		f.write("		<stat 	name=\"float_regfile_writes\" value=\"50000\"/>\n")	
		f.write("		<!-- accesses to the working reg -->\n")	
		f.write("		<stat 	name=\"function_calls\" value=\"5\"/>\n")
		f.write("		<stat 	name=\"context_switches\" value=\"260343\"/>\n")	
		f.write("		<!-- Number of Windowes switches (number of function calls and returns)-->\n")
		f.write("		<!-- Alu stats by default, the processor has one FPU that includes the divider and multiplier. The fpu accesses should include accesses to multiplier and divider  -->\n")	
		f.write("		<stat 	name=\"ialu_accesses\" value=\"300000\"/>\n")				
		f.write("		<stat 	name=\"fpu_accesses\" value=\"100000\"/>\n")	
		f.write("		<stat 	name=\"mul_accesses\" value=\"200000\"/>\n")	
		f.write("		<stat 	name=\"cdb_alu_accesses\" value=\"300000\"/>\n")	
		f.write("		<stat 	name=\"cdb_mul_accesses\" value=\"200000\"/>\n")	
		f.write("		<stat 	name=\"cdb_fpu_accesses\" value=\"100000\"/>\n")	
		f.write("		<!-- multiple cycle accesses should be counted multiple times, otherwise, McPAT can use internal counter for different floating point instructions to get final accesses. But that needs detailed info for floating point inst mix -->\n")	
		f.write("		<!--  currently the performance simulator should  make sure all the numbers are final numbers,  including the explicit read/write accesses, and the implicite accesses such as replacements and etc. Future versions of McPAT may be able to reason the implicite access based on param and stats of last level cache The same rule applies to all cache access stats too!  -->\n")	
		f.write("		<!-- following is AF for max power computation.  Do not change them, unless you understand them-->\n")
		f.write("		<stat 	name=\"IFU_duty_cycle\" value=\"1\"/>\n")				
		f.write("		<stat 	name=\"LSU_duty_cycle\" value=\"0.5\"/>\n")	
		f.write("		<stat 	name=\"MemManU_I_duty_cycle\" value=\"1\"/>\n")	
		f.write("		<stat 	name=\"MemManU_D_duty_cycle\" value=\"0.5\"/>\n")	
		f.write("		<stat 	name=\"ALU_duty_cycle\" value=\"1\"/>\n")	
		f.write("		<stat 	name=\"MUL_duty_cycle\" value=\"0.3\"/>\n")	
		f.write("		<stat 	name=\"FPU_duty_cycle\" value=\"0.3\"/>\n")	
		f.write("		<stat 	name=\"ALU_cdb_duty_cycle\" value=\"1\"/>\n")	
		f.write("		<stat 	name=\"MUL_cdb_duty_cycle\" value=\"0.3\"/>\n")	
		f.write("		<stat 	name=\"FPU_cdb_duty_cycle\" value=\"0.3\"/>\n")	
		f.write("		<param name=\"number_of_BPT\" value=\"2\"/>\n")	
		f.write("		<component id=\"system.core%0.f.predictor\" name=\"PBT\">\n" % i)
		f.write("			<!-- branch predictor; tournament predictor see Alpha implementation -->\n")	
		f.write("			<param name=\"local_predictor_size\" value=\"10,3\"/>\n")	
		f.write("			<param name=\"local_predictor_entries\" value=\"1024\"/>\n")
		f.write("			<param name=\"global_predictor_entries\" value=\"4096\"/>\n")	
		f.write("			<param name=\"global_predictor_bits\" value=\"2\"/>\n")	
		f.write("			<param name=\"chooser_predictor_entries\" value=\"4096\"/>\n")	
		f.write("			<param name=\"chooser_predictor_bits\" value=\"2\"/>\n")	
		f.write("			<!-- These parameters can be combined like below in next version name=\"load_predictor\" value=\"10,3,1024\" name=\"global_predictor\" value=\"4096,2\" name=\"predictor_chooser\" value=\"4096,2\" -->\n")
		f.write("		</component>\n")
		f.write("		<component id=\"system.core%0.f.itlb\" name=\"itlb\">\n" % i)
		f.write("			<param name=\"number_entries\" value=\"128\"/>\n")	
		f.write("			<stat 	name=\"total_accesses\" value=\"200000\"/>\n")	
		f.write("			<stat 	name=\"total_misses\" value=\"4\"/>\n")	
		f.write("			<stat 	name=\"conflicts\" value=\"0\"/>\n")		
		f.write("			<!-- there is no write requests to itlb although writes happen to itlb after miss, which is actually a replacement -->\n")	
		f.write("		</component>\n")
		f.write("		<component id=\"system.core%0.f.icache\" name=\"icache\">\n" % i)
		f.write("			<!-- there is no write requests to itlb although writes happen to it after miss, which is actually a replacement -->\n")	
		f.write("			<param name=\"icache_config\" value=\"8192,7,4,1,8,1,32,0\"/>\n")	
		f.write("			<!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->\n")	
		f.write("			<!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->\n")	
		f.write("			<param name=\"buffer_sizes\" value=\"16, 16, 16, 0\"/>\n")	
		f.write("			<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size--> \n")	
		f.write("			<stat 	name=\"read_accesses\" value=\"200000\"\/>\n")
		f.write("			<stat 	name=\"read_misses\" value=\"0\"/>\n")	
		f.write("			<stat 	name=\"conflicts\" value=\"0\"/>\n")					
		f.write("		</component>\n")
		f.write("		<component id=\"system.core%0.f.dtlb\" name=\"dtlb\">\n" % i)
		f.write("			<param name=\"number_entries\" value=\"128\"/>\n")	
		f.write("			<!--dual threads-->\n")
		f.write("			<stat 	name=\"total_accesses\" value=\"400000\"/>\n")	
		f.write("			<stat 	name=\"total_misses\" value=\"4\"/>\n")	
		f.write("			<stat 	name=\"conflicts\" value=\"0\"/>\n")		
		f.write("		</component>\n")
		f.write("		<component id=\"system.core%0.f.dcache\" name=\"dcache\">\n" % i)
		f.write("			<!-- all the buffer related are optional --> \n")	
		f.write("			<param name=\"dcache_config\" value=\"8192,7,4,1, 3,1, 16,1\" />\n")
		f.write("			<param name=\"buffer_sizes\" value=\"16, 16, 16, 16\"/>\n")	
		f.write("			<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->\n")	
		f.write("			<stat 	name=\"read_accesses\" value=\"800000\"/>\n")	
		f.write("			<stat 	name=\"write_accesses\" value=\"27276\"/>\n")	
		f.write("			<stat 	name=\"read_misses\" value=\"1632\"/>\n")	
		f.write("			<stat 	name=\"write_misses\" value=\"183\"/>\n")	
		f.write("			<stat 	name=\"conflicts\" value=\"0\"/>\n")		
		f.write("		</component>\n")
		f.write("		<param name=\"number_of_BTB\" value=\"2\"/>\n")	
		f.write("		<component id=\"system.core%0.f.BTB\" name=\"BTB\">\n" % i)
		f.write("			<!-- all the buffer related are optional -->\n")	
		f.write("			<param name=\"BTB_config\" value=\"8192,4,2,1, 1,3\"/>\n")	 
		f.write("			<!--should be 4096 + 1024 -->\n")	
		f.write("			<!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->\n")
		f.write("			<stat 	name=\"read_accesses\" value=\"400000\"/>\n")	 
		f.write("			<!--See IFU code for guideline -->\n")	
		f.write("			<stat 	name=\"write_accesses\" value=\"0\"/>\n")	
		f.write("		</component>\n")
		f.write("	</component>\n")

	##############################################################

	f.write("	<!--**********************************************************************-->	\n")
	f.write("	<component id=\"system.L1Directory0\" name=\"L1Directory0\">\n") 
	f.write("		<param name=\"Directory_type\" value=\"0\"/>\n")
	f.write("		<!--0 cam based shadowed tag. 1 directory cache -->\n")	
	f.write("		<param name=\"Dir_config\" value=\"4096,2,0,1,100,100, 8\"/>\n")
	f.write("		<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->\n")
	f.write("		<param name=\"buffer_sizes\" value=\"8, 8, 8, 8\"/>\n")	
	f.write("		<!-- all the buffer related are optional -->\n")
	f.write("		<param name=\"clockrate\" value=\"3400\"/>\n")
	f.write("		<param name=\"vdd\" value=\"0\"/>\n")
	f.write("		<!-- 0 means using ITRS default vdd -->\n")
	f.write("		<param name=\"ports\" value=\"1,1,1\"/>\n")
	f.write("		<!-- number of r, w, and rw search ports -->\n")
	f.write("		<param name=\"device_type\" value=\"0\"/>\n")
	f.write("		<!-- altough there are multiple access types, Performance simulator needs to cast them into reads or writes e.g. the invalidates can be considered as writes -->\n")
	f.write("		<stat name=\"read_accesses\" value=\"800000\"/>\n")
	f.write("		<stat name=\"write_accesses\" value=\"27276\"/>\n")
	f.write("		<stat name=\"read_misses\" value=\"1632\"/>\n")
	f.write("		<stat name=\"write_misses\" value=\"183\"/>\n")
	f.write("		<stat name=\"conflicts\" value=\"20\"/>\n")	
	f.write("	</component>\n")
	f.write("	<component id=\"system.L2Directory0\" name=\"L2Directory0\">\n")
	f.write("		<param name=\"Directory_type\" value=\"1\"/>\n")
	f.write("		<!--0 cam based shadowed tag. 1 directory cache -->\n")	
	f.write("		<param name=\"Dir_config\" value=\"1048576,16,16,1,2, 100\"/>\n")
	f.write("		<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->\n")
	f.write("		<param name=\"buffer_sizes\" value=\"8, 8, 8, 8\"/>\n")	
	f.write("		<!-- all the buffer related are optional -->\n")
	f.write("		<param name=\"clockrate\" value=\"3400\"/>\n")
	f.write("		<param name=\"vdd\" value=\"0\"/>\n")
	f.write("		<!-- 0 means using ITRS default vdd -->\n")
	f.write("		<param name=\"ports\" value=\"1,1,1\"/>\n")
	f.write("		<!-- number of r, w, and rw search ports -->\n")
	f.write("		<param name=\"device_type\" value=\"0\"/>\n")
	f.write("		<!-- altough there are multiple access types, Performance simulator needs to cast them into reads or writes e.g. the invalidates can be considered as writes -->\n")
	f.write("		<stat name=\"read_accesses\" value=\"58824\"/>\n")
	f.write("		<stat name=\"write_accesses\" value=\"27276\"/>\n")
	f.write("		<stat name=\"read_misses\" value=\"1632\"/>\n")
	f.write("		<stat name=\"write_misses\" value=\"183\"/>\n")
	f.write("		<stat name=\"conflicts\" value=\"100\"/>\n")
	f.write("		<stat name=\"duty_cycle\" value=\"0.45\"/>\n")		
	f.write("	</component>\n")
	f.write("	<component id=\"system.L20\" name=\"L20\">\n")
	f.write("		<!-- all the buffer related are optional -->\n")
	f.write("		<param name=\"L2_config\" value=\"1048576,32, 8, 8, 8, 23, 32, 1\"/>\n") 
	f.write("		<!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy -->\n")
	f.write("		<param name=\"buffer_sizes\" value=\"16,16,16,16\"/>\n") ## [16,16,16,16]
	f.write("		<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->	\n")
	f.write("		<param name=\"clockrate\" value=\"3400\"/>\n")
	f.write("		<param name=\"ports\" value=\"1,1,1\"/>\n")
	f.write("		<!-- number of r, w, and rw ports -->\n")
	f.write("		<param name=\"device_type\" value=\"0\"/>\n")
	f.write("		<stat name=\"read_accesses\" value=\"200000\"/>\n")
	f.write("		<stat name=\"write_accesses\" value=\"27276\"/>\n")
	f.write("		<stat name=\"read_misses\" value=\"1632\"/>\n")
	f.write("		<stat name=\"write_misses\" value=\"183\"/>\n")
	f.write("		<stat name=\"conflicts\" value=\"0\"/>\n")	
	f.write("		<stat name=\"duty_cycle\" value=\"1.0\"/>\n")	
	f.write("	</component>\n")

	f.write("	<!--**********************************************************************-->\n")
	f.write("	<component id=\"system.L30\" name=\"L30\">\n")
	f.write("		<param name=\"L3_config\" value=\"16777216,64,16, 16, 16, 100,1\"/>\n")
	f.write("		<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->\n")
	f.write("		<param name=\"clockrate\" value=\"850\"/>\n")
	f.write("		<param name=\"ports\" value=\"1,1,1\"/>\n")
	f.write("		<!-- number of r, w, and rw ports -->\n")
	f.write("		<param name=\"device_type\" value=\"0\"/>\n")
	f.write("		<param name=\"buffer_sizes\" value=\"16,16,16,16\"/>\n") ## [16,16,16,16]
	f.write("		<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->	\n")
	f.write("		<stat name=\"read_accesses\" value=\"11824\"/>\n")
	f.write("		<stat name=\"write_accesses\" value=\"11276\"/>\n")
	f.write("		<stat name=\"read_misses\" value=\"1632\"/>\n")
	f.write("		<stat name=\"write_misses\" value=\"183\"/>\n")
	f.write("		<stat name=\"conflicts\" value=\"0\"/>\n")	
	f.write("		<stat name=\"duty_cycle\" value=\"1.0\"/>\n")	
	f.write("	</component>\n")
	f.write("	<!--**********************************************************************-->\n")
	f.write("	<component id=\"system.NoC0\" name=\"noc0\">\n")
	f.write("		<param name=\"clockrate\" value=\"3400\"/>\n")
	f.write("		<param name=\"vdd\" value=\"0\"/>\n")
	f.write("		<!-- 0 means using ITRS default vdd -->\n")
	f.write("		<param name=\"type\" value=\"1\"/>\n")
	f.write("		<!--0:bus, 1:NoC , for bus no matter how many nodes sharing the bus at each time only one node can send req -->\n")
	f.write("		<param name=\"horizontal_nodes\" value=\"2\"/>\n")
	f.write("		<param name=\"vertical_nodes\" value=\"1\"/>\n")
	f.write("		<param name=\"has_global_link\" value=\"0\"/>\n")
	f.write("		<!-- 1 has global link, 0 does not have global link -->\n")
	f.write("		<param name=\"link_throughput\" value=\"1\"/>\n")
	f.write("		<!--w.r.t clock -->\n")
	f.write("		<param name=\"link_latency\" value=\"1\"/>\n")
	f.write("		<!--w.r.t clock -->\n")
	f.write("		<!-- througput >= latency -->\n")
	f.write("		<!-- Router architecture -->\n")
	f.write("		<param name=\"input_ports\" value=\"9\"/>\n")
	f.write("		<param name=\"output_ports\" value=\"8\"/>\n")
	f.write("		<!-- For bus the I/O ports should be 1 -->\n")
	f.write("		<param name=\"flit_bits\" value=\"256\"/>\n")
	f.write("		<param name=\"input_buffer_entries_per_vc\" value=\"16\"/>\n")
	f.write("		<!--VCs within the same ports share input buffers whose size is proportional to the number of VCs-->\n")
	f.write("		<param name=\"chip_coverage\" value=\"1\"/>\n")
	f.write("		<!-- When multiple NOC present, one NOC will cover part of the whole chip. chip_coverage <=1 -->\n")
	f.write("		<param name=\"link_routing_over_percentage\" value=\"0.5\"/>\n")
	f.write("		<!-- Links can route over other components or occupy whole area. by default, 50% of the NoC global links routes over other components -->\n")
	f.write("		<stat name=\"total_accesses\" value=\"100000\"/>\n")
	f.write("		<!-- This is the number of total accesses within the whole network not for each router -->\n")
	f.write("		<stat name=\"duty_cycle\" value=\"1\"/>\n")
	f.write("	</component>\n")		
	f.write("	<!--**********************************************************************-->\n")


	f.write("	<component id=\"system.mc\" name=\"mc\">\n")
	f.write("		<!-- Memeory controllers are for DDR(2,3...) DIMMs -->\n")
	f.write("		<!-- current version of McPAT uses published values for base parameters of memory controller improvments on MC will be added in later versions. -->\n")
	f.write("		<param name=\"type\" value=\"0\"/>\n") 
	f.write("		<!-- 1: low power; 0 high performance -->\n")
	f.write("		<param name=\"mc_clock\" value=\"400\"/>\n")
	f.write("		<!--DIMM IO bus clock rate MHz DDR2-400 for Niagara 1--> \n")
	f.write("		<param name=\"vdd\" value=\"0\"/>\n")
	f.write("		<!-- 0 means using ITRS default vdd -->\n")
	f.write("		<param name=\"peak_transfer_rate\" value=\"6400\"/>\n")
	f.write("		<!--MB/S-->\n")
	f.write("		<param name=\"block_size\" value=\"64\"/>\n")
	f.write("		<!--B-->\n")
	f.write("		<param name=\"number_mcs\" value=\"%0.f\"/>\n" % num_mem_controllers)
	f.write("		<!-- current McPAT only supports homogeneous memory controllers -->\n")
	f.write("		<param name=\"memory_channels_per_mc\" value=\"1\"/>\n")
	f.write("		<param name=\"number_ranks\" value=\"2\"/>\n")
	f.write("		<param name=\"withPHY\" value=\"0\"/>\n")
	f.write("		<!-- # of ranks of each channel-->\n")
	f.write("		<param name=\"req_window_size_per_channel\" value=\"32\"/>\n")
	f.write("		<param name=\"IO_buffer_size_per_channel\" value=\"32\"/>\n")
	f.write("		<param name=\"databus_width\" value=\"128\"/>\n")
	f.write("		<param name=\"addressbus_width\" value=\"51\"/>\n")
	f.write("		<!-- McPAT will add the control bus width to the addressbus width automatically -->\n")
	f.write("		<stat name=\"memory_accesses\" value=\"66666\"/>\n")
	f.write("		<stat name=\"memory_reads\" value=\"33333\"/>\n")
	f.write("		<stat name=\"memory_writes\" value=\"33333\"/>\n")
	f.write("		<!-- McPAT does not track individual mc, instead, it takes the total accesses and calculate the average power per MC or per channel. This is sufficent for most application. Further trackdown can be easily added in later versions. -->\n")  			
	f.write("	</component>\n")
	f.write("	<!--**********************************************************************-->\n")
	f.write("	<component id=\"system.niu\" name=\"niu\">\n")
	f.write("		<!-- On chip 10Gb Ethernet NIC, including XAUI Phy and MAC controller  -->\n")
	f.write("		<!-- For a minimum IP packet size of 84B at 10Gb/s, a new packet arrives every 67.2ns. the low bound of clock rate of a 10Gb MAC is 150Mhz -->\n")
	f.write("		<param name=\"type\" value=\"0\"/>\n") 
	f.write("		<!-- 1: low power; 0 high performance -->\n")
	f.write("		<param name=\"clockrate\" value=\"350\"/>\n")
	f.write("		<param name=\"vdd\" value=\"0\"/>\n")
	f.write("		<!-- 0 means using ITRS default vdd -->\n")
	f.write("		<param name=\"number_units\" value=\"4\"/>\n") 
	f.write("		<!-- unlike PCIe and memory controllers, each Ethernet controller only have one port -->\n")
	f.write("		<stat name=\"duty_cycle\" value=\"1.0\"/>\n") 
	f.write("		<!-- achievable max load <= 1.0 -->\n")
	f.write("		<stat name=\"total_load_perc\" value=\"0.7\"/>\n") 
	f.write("		<!-- ratio of total achived load to total achivable bandwidth  -->\n")
	f.write("		<!-- McPAT does not track individual nic, instead, it takes the total accesses and calculate the average power per nic or per channel. This is sufficent for most application. -->\n")  			
	f.write("	</component>\n")
	f.write("	<!--**********************************************************************-->\n")
	f.write("	<component id=\"system.pcie\" name=\"pcie\">\n")
	f.write("		<!-- On chip PCIe controller, including Phy-->\n")
	f.write("		<!-- For a minimum PCIe packet size of 84B at 8Gb/s per lane (PCIe 3.0), a new packet arrives every 84ns. the low bound of clock rate of a PCIe per lane logic is 120Mhz -->\n")
	f.write("		<param name=\"type\" value=\"0\"/>\n") 
	f.write("		<!-- 1: low power; 0 high performance -->\n")
	f.write("		<param name=\"withPHY\" value=\"1\"/>\n")
	f.write("		<param name=\"clockrate\" value=\"350\"/>\n")
	f.write("		<param name=\"vdd\" value=\"0\"/>\n")
	f.write("		<!-- 0 means using ITRS default vdd -->\n")
	f.write("		<param name=\"number_units\" value=\"1\"/>\n")
	f.write("		<param name=\"num_channels\" value=\"8\"/>\n") 
	f.write("		<!-- 2 ,4 ,8 ,16 ,32 -->\n")
	f.write("		<stat name=\"duty_cycle\" value=\"1.0\"/>\n") 
	f.write("		<!-- achievable max load <= 1.0 -->\n")
	f.write("		<stat name=\"total_load_perc\" value=\"0.7\"/>\n") 
	f.write("		<!-- Percentage of total achived load to total achivable bandwidth  -->\n")
	f.write("		<!-- McPAT does not track individual pcie controllers, instead, it takes the total accesses and calculate the average power per pcie controller or per channel. This is sufficent for most application. -->\n")  			
	f.write("	</component>\n")
	f.write("	<!--**********************************************************************-->\n")
	f.write("	<component id=\"system.flashc\" name=\"flashc\">\n")
	f.write("		<param name=\"number_flashcs\" value=\"0\"/>\n")
	f.write("		<param name=\"vdd\" value=\"0\"/>\n")
	f.write("		<!-- 0 means using ITRS default vdd -->\n")
	f.write("		<param name=\"type\" value=\"1\"/>\n") 
	f.write("		<!-- 1: low power; 0 high performance -->\n")
	f.write("		<param name=\"withPHY\" value=\"1\"/>\n")
	f.write("		<param name=\"peak_transfer_rate\" value=\"200\"/>\n")
	f.write("		<!--Per controller sustainable reak rate MB/S -->\n")
	f.write("		<stat name=\"duty_cycle\" value=\"1.0\"/>\n") 
	f.write("		<!-- achievable max load <= 1.0 -->\n")
	f.write("		<stat name=\"total_load_perc\" value=\"0.7\"/>\n") 
	f.write("		<!-- Percentage of total achived load to total achivable bandwidth  -->\n")
	f.write("		<!-- McPAT does not track individual flash controller, instead, it takes the total accesses and calculate the average power per fc or per channel. This is sufficent for most application -->\n")  			
	f.write("	</component>\n")
	f.write("	<!--**********************************************************************-->\n")

	f.write("	</component>\n")
	f.write("</component>\n")



	###############################################################
	# ## CPUs
	# number_of_cores ## [#cores]
	# number_of_L1Directories ## [Amount: 4]
	# number_of_L2Directories ## [0]
	# Private_L2 ## [1: private; 0 shared]
	# number_of_L3s ## [how many L3$ clusters]
	# ##### number_of_NoCs (later with 3D-ICs)
	# core_tech_node ## [65 45 32 22 14] nm
	# number_cache_levels ## [2 or 3]
	# power_gating ## 
	# Clock Frequency of CPU
	# Clock Frequency of GPU
	# NOC_BUS_type
	## GPUs

	## close
	f.close()

## test only
# create_xml_for_mcpat(16, 16, 16, 4, "default_mm")